{"ast":null,"code":"//const baseUrl = process.env.BACKEND_URL;\nconst baseUrl = 'http://localhost:8080';\n\nconst postNewUser = (endpoint, data, method) => {\n  const url = `${baseUrl}/${endpoint}`;\n\n  if (method === 'POST') {\n    return fetch(url, {\n      method,\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n  }\n};\n\nexport const startRegister = (userName, email, password) => {\n  return async dispatch => {\n    const resp = await postNewUser('auth/register', {\n      userName,\n      email,\n      password\n    }, 'POST');\n    const body = await resp.json();\n\n    if (body.ok) {\n      console.log(\"Too corerect\");\n      dispatch(login({\n        userName: body.usuario.userName,\n        email: body.usuario.email,\n        password: body.usuario.password\n      }));\n    } else {\n      console.log(body.err);\n      return console.log(\"mail o usuario en uso\");\n    }\n  };\n};\nexport const startLogin = (userName, password) => {\n  return async dispatch => {\n    const resp = await postNewUser('auth/login', {\n      userName,\n      password\n    }, 'POST');\n    const body = await resp.json();\n\n    if (body.ok) {\n      console.log(\"El email era valido;\");\n    } else {\n      console.log(\"El email  NO era valido;\");\n    }\n  };\n};\n\nconst login = user => ({\n  type: \"authLogin\",\n  payload: user\n});","map":{"version":3,"sources":["/home/juan/js/Movie-App/Client/src/actions/auth.js"],"names":["baseUrl","postNewUser","endpoint","data","method","url","fetch","headers","body","JSON","stringify","startRegister","userName","email","password","dispatch","resp","json","ok","console","log","login","usuario","err","startLogin","user","type","payload"],"mappings":"AAAA;AAGA,MAAMA,OAAO,GAAG,uBAAhB;;AACA,MAAMC,WAAW,GAAG,CAAEC,QAAF,EAAYC,IAAZ,EAAkBC,MAAlB,KAA8B;AAE9C,QAAMC,GAAG,GAAI,GAAGL,OAAS,IAAIE,QAAU,EAAvC;;AAEA,MAAKE,MAAM,KAAK,MAAhB,EAAyB;AACrB,WAAOE,KAAK,CAACD,GAAD,EAAK;AACbD,MAAAA,MADa;AAEbG,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFI;AAKbC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAgBP,IAAhB;AALO,KAAL,CAAZ;AAOH;AACJ,CAbD;;AAeA,OAAO,MAAMQ,aAAa,GAAG,CAAEC,QAAF,EAAYC,KAAZ,EAAmBC,QAAnB,KAAiC;AAC1D,SAAO,MAAOC,QAAP,IAAqB;AAExB,UAAMC,IAAI,GAAG,MAAMf,WAAW,CAAE,eAAF,EAAmB;AAAEW,MAAAA,QAAF;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB,KAAnB,EAAkD,MAAlD,CAA9B;AAEA,UAAMN,IAAI,GAAG,MAAMQ,IAAI,CAACC,IAAL,EAAnB;;AACA,QAAIT,IAAI,CAACU,EAAT,EAAY;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAL,MAAAA,QAAQ,CAAEM,KAAK,CAAC;AACZT,QAAAA,QAAQ,EAAEJ,IAAI,CAACc,OAAL,CAAaV,QADX;AAEZC,QAAAA,KAAK,EAAEL,IAAI,CAACc,OAAL,CAAaT,KAFR;AAGZC,QAAAA,QAAQ,EAAEN,IAAI,CAACc,OAAL,CAAaR;AAHX,OAAD,CAAP,CAAR;AAKH,KAPD,MAOO;AACHK,MAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAI,CAACe,GAAjB;AACA,aAAOJ,OAAO,CAACC,GAAR,CAAY,uBAAZ,CAAP;AACH;AACJ,GAhBD;AAiBH,CAlBM;AAoBP,OAAO,MAAMI,UAAU,GAAG,CAAEZ,QAAF,EAAYE,QAAZ,KAA0B;AAChD,SAAO,MAAOC,QAAP,IAAqB;AAExB,UAAMC,IAAI,GAAG,MAAMf,WAAW,CAAE,YAAF,EAAgB;AAAEW,MAAAA,QAAF;AAAYE,MAAAA;AAAZ,KAAhB,EAAwC,MAAxC,CAA9B;AAEA,UAAMN,IAAI,GAAG,MAAMQ,IAAI,CAACC,IAAL,EAAnB;;AACA,QAAIT,IAAI,CAACU,EAAT,EAAY;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAEH,KAHD,MAGO;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH;AACJ,GAXD;AAYH,CAbM;;AAiBP,MAAMC,KAAK,GAAKI,IAAF,KAAa;AACvBC,EAAAA,IAAI,EAAE,WADiB;AAEvBC,EAAAA,OAAO,EAAEF;AAFc,CAAb,CAAd","sourcesContent":["//const baseUrl = process.env.BACKEND_URL;\n\n\nconst baseUrl = 'http://localhost:8080';\nconst postNewUser = ( endpoint, data, method ) => {\n    \n    const url = `${ baseUrl }/${ endpoint }`;\n    \n    if ( method === 'POST' ) {\n        return fetch(url,{\n            method,\n            headers: {\n                'Content-type': 'application/json'\n            },\n            body: JSON.stringify( data )\n        });\n    }\n}\n\nexport const startRegister = ( userName, email, password ) => {\n    return async( dispatch ) => {\n        \n        const resp = await postNewUser( 'auth/register', { userName, email, password }, 'POST' );\n        \n        const body = await resp.json();\n        if (body.ok){\n            console.log(\"Too corerect\")\n            dispatch( login({\n                userName: body.usuario.userName,\n                email: body.usuario.email,\n                password: body.usuario.password\n            }));\n        } else {\n            console.log(body.err)\n            return console.log(\"mail o usuario en uso\");\n        }\n    }\n}\n\nexport const startLogin = ( userName, password ) => {\n    return async( dispatch ) => {\n        \n        const resp = await postNewUser( 'auth/login', { userName, password }, 'POST' );\n        \n        const body = await resp.json();\n        if (body.ok){\n            console.log(\"El email era valido;\")\n            \n        } else {\n            console.log(\"El email  NO era valido;\")\n        }\n    }\n}\n\n\n\nconst login = ( user ) => ({\n    type: \"authLogin\",\n    payload: user\n});"]},"metadata":{},"sourceType":"module"}